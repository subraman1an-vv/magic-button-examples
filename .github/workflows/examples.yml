name: Generate stacks for examples and publish

on:
  push:
    branches: [ main ]
    paths: ['examples/**/**']

jobs:

  publish_stack_examples:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Create files
      id: create_files
      run: |
        FOLDERS=$(ls -d examples/*/ | jq -R)
        for example_folder in $FOLDERS;
        do
          resource=$(cut -d "/" -f 2 <<< "$example_folder")
          filename=${resource}.md
          if [ -f "./examples/$resource/$filename" ]; then
            echo "$filename exists."
          else
            touch ./examples/${resource}/${filename}
            echo "$filename created."
          fi
        done

    - name: Commit and Push Changes
      run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config --global user.name "GitHub Actions"
            git config --global user.email "action@github.com"
            git pull origin main
            git add ./examples/*
            git commit -m "Add markdown files"
            git push
          else
            echo "No changes!";
          fi

    - name: Prepare Index Examples
      run: |
        mkdir -p examples/zips
        printf '%s\n' 'Terraform Oracle Cloud Infrastructure Provider Examples' > examples/README.md
        # printf '%s\n' '' '[magic_button]: https://oci-resourcemanager-plugin.plugins.oci.oraclecloud.com/latest/deploy-to-oracle-cloud.svg' >> examples/README.md
    
    - name: Create stacks
      id: create_stacks
      run: |
        FOLDERS=$(ls -d examples/*/ | jq -R)
        ASSETS=""
        MAGIC_LINK="https://cloud.oracle.com/resourcemanager/stacks/create?zipUrl=https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases/latest/download/"
        for example_folder in $FOLDERS;
        do
          resource=$(cut -d "/" -f 2 <<< "$example_folder")
          MAGIC_LINK="https://cloud.oracle.com/resourcemanager/stacks/create?zipUrl=https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases/latest/download/"
          echo "$resource";
          if [[ "$resource" != "zips" ]]; then
            filename=${resource}.md
            filezip=${resource}.zip
            cat ./examples/${resource}/$filename > ./examples/${resource}/README.md
            printf '\n## Magic Button \n[![Deploy to Oracle Cloud](https://oci-resourcemanager-plugin.plugins.oci.oraclecloud.com/latest/deploy-to-oracle-cloud.svg)]('${MAGIC_LINK}${filezip}')' >>./examples/${resource}/README.md
            folder=$(echo "$example_folder" | tr -d '"')
            echo "::group::Processing $resource"
            zip -r $filezip $folder || { printf '\nâ›” Unable to create %s stack.\n'; exit 1;  }
            echo "::endgroup::"
            # ASSETS+="-a ${filezip} "
            cp $filezip examples/zips
            printf '%s\n' '- '${resource}'  
            [![Deploy to Oracle Cloud](https://oci-resourcemanager-plugin.plugins.oci.oraclecloud.com/latest/deploy-to-oracle-cloud.svg)]('${MAGIC_LINK}${filezip}')' >> examples/README.md
          fi
        done
        echo "::set-output name=assets::$ASSETS"
    
    # - name: Create Release
    #   run: hub release create ${{ steps.create_stacks.outputs.assets }} -F pages/README.md $(date +%Y%m%d%H%M%S)
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # - name: Generate Index for Github Pages
    #   run: |
    #     pip install markdown
    #     markdown_py pages/README.md > pages/index.html
    #     cp pages/README.md ./examples/README.md
        
    - name: Commit and Push Changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          git config --global user.name "Subramanian V V"
          git config --global user.email "subramanian.v.v@oracle.com"
          git pull origin main
          git add ./examples/*
          git commit -m "Updates"
          git push
        else
          echo "No changes!";
        fi
          
    # - name: Publish to Github Pages
    #   uses: peaceiris/actions-gh-pages@v3
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     publish_branch: gh-pages
    #     publish_dir: pages